{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response.data, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: (username, password) => api.post(\"/auth/login\", {\n    username,\n    password\n  }),\n  signup: (username, email, password, role) => api.post(\"/auth/signup\", {\n    username,\n    email,\n    password,\n    role\n  })\n};\nexport const medicationAPI = {\n  getMedications: () => api.get(\"/medications\"),\n  addMedication: medication => api.post(\"/medications\", medication),\n  updateMedication: (id, medication) => api.put(`/medications/${id}`, medication),\n  deleteMedication: id => api.delete(`/medications/${id}`),\n  markAsTaken: (medicationId, date, photo) => {\n    const formData = new FormData();\n    formData.append(\"date\", date);\n    if (photo) {\n      formData.append(\"photo\", photo);\n    }\n    return api.post(`/medications/${medicationId}/mark-taken`, formData);\n  },\n  getMedicationLogs: medicationId => api.get(`/medications/${medicationId}/logs`)\n};\nexport const dashboardAPI = {\n  getStats: () => api.get(\"/dashboard/stats\")\n};\nexport const analyticsAPI = {\n  getAdherenceData: (period = \"week\") => api.get(`/analytics/adherence?period=${period}`)\n};\nexport const caretakerAPI = {\n  getPatients: () => api.get(\"/caretaker/patients\"),\n  addPatient: patientUsername => api.post(\"/caretaker/patients\", {\n    patientUsername\n  }),\n  getPatientMedications: patientId => api.get(`/caretaker/patients/${patientId}/medications`),\n  markPatientMedicationAsTaken: (patientId, medicationId, date) => api.post(`/caretaker/patients/${patientId}/medications/${medicationId}/mark-taken`, {\n    date\n  })\n};\nexport const uploadAPI = {\n  uploadMedicationPhoto: (medicationLogId, file) => {\n    const formData = new FormData();\n    formData.append(\"photo\", file);\n    formData.append(\"medicationLogId\", medicationLogId);\n    return api.post(\"/uploads/medication-photo\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n  },\n  getMedicationPhotos: medicationLogId => api.get(`/uploads/medication-photos/${medicationLogId}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","data","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","login","username","password","post","signup","email","role","medicationAPI","getMedications","get","addMedication","medication","updateMedication","id","put","deleteMedication","delete","markAsTaken","medicationId","date","photo","formData","FormData","append","getMedicationLogs","dashboardAPI","getStats","analyticsAPI","getAdherenceData","period","caretakerAPI","getPatients","addPatient","patientUsername","getPatientMedications","patientId","markPatientMedicationAsTaken","uploadAPI","uploadMedicationPhoto","medicationLogId","file","getMedicationPhotos"],"sources":["D:/Website Learners Assignment/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\"\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n})\n\n// Add token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"token\")\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Handle token expiration\napi.interceptors.response.use(\n  (response) => response.data,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  },\n)\n\nexport const authAPI = {\n  login: (username, password) => api.post(\"/auth/login\", { username, password }),\n  signup: (username, email, password, role) => api.post(\"/auth/signup\", { username, email, password, role }),\n}\n\nexport const medicationAPI = {\n  getMedications: () => api.get(\"/medications\"),\n  addMedication: (medication) => api.post(\"/medications\", medication),\n  updateMedication: (id, medication) => api.put(`/medications/${id}`, medication),\n  deleteMedication: (id) => api.delete(`/medications/${id}`),\n  markAsTaken: (medicationId, date, photo) => {\n    const formData = new FormData()\n    formData.append(\"date\", date)\n    if (photo) {\n      formData.append(\"photo\", photo)\n    }\n    return api.post(`/medications/${medicationId}/mark-taken`, formData)\n  },\n  getMedicationLogs: (medicationId) => api.get(`/medications/${medicationId}/logs`),\n}\n\nexport const dashboardAPI = {\n  getStats: () => api.get(\"/dashboard/stats\"),\n}\n\nexport const analyticsAPI = {\n  getAdherenceData: (period = \"week\") => api.get(`/analytics/adherence?period=${period}`),\n}\n\nexport const caretakerAPI = {\n  getPatients: () => api.get(\"/caretaker/patients\"),\n  addPatient: (patientUsername) => api.post(\"/caretaker/patients\", { patientUsername }),\n  getPatientMedications: (patientId) => api.get(`/caretaker/patients/${patientId}/medications`),\n  markPatientMedicationAsTaken: (patientId, medicationId, date) =>\n    api.post(`/caretaker/patients/${patientId}/medications/${medicationId}/mark-taken`, { date }),\n}\n\nexport const uploadAPI = {\n  uploadMedicationPhoto: (medicationLogId, file) => {\n    const formData = new FormData()\n    formData.append(\"photo\", file)\n    formData.append(\"medicationLogId\", medicationLogId)\n\n    return api.post(\"/uploads/medication-photo\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    })\n  },\n  getMedicationPhotos: (medicationLogId) => api.get(`/uploads/medication-photos/${medicationLogId}`),\n}\n\nexport default api\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}